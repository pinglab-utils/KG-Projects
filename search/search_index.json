{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KG Projects Welcome to API card collection! Application Programming Interfaces (APIs) are software intermediaries that enable two applications to communicate. Many biomedical knowledge bases and software tools support API access. We have compiled all API cards collected by students in BioInfo 201-Winter, 2022, UCLA class, conducted by Pinglab UCLA , as their class project into a unified document. The goal of this project is to: Learn which APIs are available for biomedical knowledge, software tools, or datasets, and how they can be accessed. Describe how these APIs can be leveraged for omics-related data analysis workflows. Each API card document is prepared by a group of students which includes: Title Description Use Cases Tutorials A Sample KG Project Following is a sample API card prepared by instructors on Uniprot API. We encourage students to follow the similar pattern and add more information (e.g., cheat sheet, citations, supporting papers) if needed and available. Title: UniProt Web API Description: UniProt is a protein knowledge base which provides information on proteins, including their sequences, their biological function, and other properties, curated from their references in the biomedical literature. UniProt can be accessed directly at uniprot.org and instructions to the API are detailed at online API document . Use cases: Retrieve individual or batch entries of proteins of interest (e.g., the text representation of a protein entry, parsable by a custom script, given at a text file Convert database identifiers (e.g., If a collaborator gave you protein IDs from another knowledgebase such as STRING DB but your software uses UniProt IDs. You want your software to convert these to UniProt so you can run your analysis properly. You can use UniProt\u2019s web API described here to convert these IDs.) Tutorial: We encourage students to create a Google Colab jupyter notebook as a tutorial with necessary code to illustrate the use of API with some tasks. Here we provide a smaple tutorial for Uniprot API. Tutorial on Uniprot API in Google Colab is available here Brought to you by Ping Lab Utils (GitHub), UCLA, 2022","title":"Home"},{"location":"#kg-projects","text":"Welcome to API card collection! Application Programming Interfaces (APIs) are software intermediaries that enable two applications to communicate. Many biomedical knowledge bases and software tools support API access. We have compiled all API cards collected by students in BioInfo 201-Winter, 2022, UCLA class, conducted by Pinglab UCLA , as their class project into a unified document. The goal of this project is to: Learn which APIs are available for biomedical knowledge, software tools, or datasets, and how they can be accessed. Describe how these APIs can be leveraged for omics-related data analysis workflows. Each API card document is prepared by a group of students which includes: Title Description Use Cases Tutorials","title":"KG Projects"},{"location":"#a-sample-kg-project","text":"Following is a sample API card prepared by instructors on Uniprot API. We encourage students to follow the similar pattern and add more information (e.g., cheat sheet, citations, supporting papers) if needed and available.","title":"A Sample KG Project"},{"location":"#title-uniprot-web-api","text":"","title":"Title: UniProt Web API"},{"location":"#description","text":"UniProt is a protein knowledge base which provides information on proteins, including their sequences, their biological function, and other properties, curated from their references in the biomedical literature. UniProt can be accessed directly at uniprot.org and instructions to the API are detailed at online API document .","title":"Description:"},{"location":"#use-cases","text":"Retrieve individual or batch entries of proteins of interest (e.g., the text representation of a protein entry, parsable by a custom script, given at a text file Convert database identifiers (e.g., If a collaborator gave you protein IDs from another knowledgebase such as STRING DB but your software uses UniProt IDs. You want your software to convert these to UniProt so you can run your analysis properly. You can use UniProt\u2019s web API described here to convert these IDs.)","title":"Use cases:"},{"location":"#tutorial","text":"We encourage students to create a Google Colab jupyter notebook as a tutorial with necessary code to illustrate the use of API with some tasks. Here we provide a smaple tutorial for Uniprot API. Tutorial on Uniprot API in Google Colab is available here Brought to you by Ping Lab Utils (GitHub), UCLA, 2022","title":"Tutorial:"},{"location":"disgenet/","text":"DisGeNET Explored by: Description: DisGeNET is a aggregative database of gene-disease, variant-disease, and disease-disease associations originally motivated by a desire for a comprehensive dataset for gene-disease modularity analyses. The primary advantage of DisGeNET over other similar association databases is its comprehensiveness and well-defined evidence scores. The developers collect associations from a variety of existing sources and with varying levels of certainty. These sources range from carefully validated databases such as UNIPROT and ClinGen to orthologous animal model databases such as MGD and automated text mining databases such as LHDGN and Clinvar. The collected associations are then integrated with an ad hoc type ontology, and their strengths are quantified with a series of metrics inherited from similar database efforts. When querying DisGeNET, one filters based on these organizational features and receives annotated lists of associations in TSV, JSON, or XML format. Python and R interfaces are available as well. API documentation is available here . Use Cases: Identify genetic correlations between diseases in user-specified gene/variant sets \u25cf Recover common biological modules across a large number of diseases \u25cf Validate disease-specific eQTLs by checking paired gene-disease and variant-disease associations (from universal sources) Tutorial: https://colab.research.google.com/drive/1IeYpwigmcDQi7SPFjPcYiuzabc3rSnJf?usp=sharing","title":"Disgenet API"},{"location":"disgenet/#disgenet","text":"Explored by:","title":"DisGeNET"},{"location":"disgenet/#description","text":"DisGeNET is a aggregative database of gene-disease, variant-disease, and disease-disease associations originally motivated by a desire for a comprehensive dataset for gene-disease modularity analyses. The primary advantage of DisGeNET over other similar association databases is its comprehensiveness and well-defined evidence scores. The developers collect associations from a variety of existing sources and with varying levels of certainty. These sources range from carefully validated databases such as UNIPROT and ClinGen to orthologous animal model databases such as MGD and automated text mining databases such as LHDGN and Clinvar. The collected associations are then integrated with an ad hoc type ontology, and their strengths are quantified with a series of metrics inherited from similar database efforts. When querying DisGeNET, one filters based on these organizational features and receives annotated lists of associations in TSV, JSON, or XML format. Python and R interfaces are available as well. API documentation is available here .","title":"Description:"},{"location":"disgenet/#use-cases","text":"Identify genetic correlations between diseases in user-specified gene/variant sets \u25cf Recover common biological modules across a large number of diseases \u25cf Validate disease-specific eQTLs by checking paired gene-disease and variant-disease associations (from universal sources)","title":"Use Cases:"},{"location":"disgenet/#tutorial","text":"https://colab.research.google.com/drive/1IeYpwigmcDQi7SPFjPcYiuzabc3rSnJf?usp=sharing","title":"Tutorial:"},{"location":"kegg/","text":"KEGG API: KEGG is a database resource for understanding high-level functions and utilities of the biological system, such as the cell, the organism and the ecosystem, from molecular-level information, especially large-scale molecular datasets generated by genome sequencing and other high-throughput experimental technologies. https://www.kegg.jp/kegg/rest/keggapi.html Explored by: Greta Gerdes, Lena Krockenberger, Ryo Yamamoto KEGG API Card: https://colab.research.google.com/drive/1B7avw4AQOIBKXh_zz1rCRI78rOVTY0d_#scr ollTo=-7zYiH5ZccsM Task: Given some human disease (e.g. insulin resistance), find the metabolic pathways that are involved in this disease using KEGG Pathway (e.g. insulin signaling pathway in muscle cells). Find specific genes within these pathways that could be potential drug targets. Find drugs that target these genes using JTC (Therapeutic Category in Japan) (e.g. Insulin Receptor INSR). Background: You have a specific human disease of interest and want to better understand specific pathways involved in the progression of this disease and identify existing drugs that target integral proteins within these pathways. Goal: Find drugs that target proteins in the disease pathway. Method: Pathways: Use the KEGG Pathways API to get pathways involved in the disease of interest (e.g. protein names and cellular localization). Get a list of genes that are potential drug targets. Drugs: Use Therapeutic Category in Japan through KEGG API to get a list of drugs that target proteins coded by genes in the list created previously. Expected outcome: A list of drugs which may play a role in treating this disease. They are drugs that interact with prominent proteins within these pathways. Slides: https://docs.google.com/presentation/d/1pKdhI_D2l1XTjee3szsl8UYE0p77ZMyR/edit#sl ide=id.g203e895e617_0_15","title":"KEGG API"},{"location":"kegg/#kegg-api","text":"KEGG is a database resource for understanding high-level functions and utilities of the biological system, such as the cell, the organism and the ecosystem, from molecular-level information, especially large-scale molecular datasets generated by genome sequencing and other high-throughput experimental technologies. https://www.kegg.jp/kegg/rest/keggapi.html Explored by: Greta Gerdes, Lena Krockenberger, Ryo Yamamoto KEGG API Card: https://colab.research.google.com/drive/1B7avw4AQOIBKXh_zz1rCRI78rOVTY0d_#scr ollTo=-7zYiH5ZccsM","title":"KEGG API:"},{"location":"kegg/#task","text":"Given some human disease (e.g. insulin resistance), find the metabolic pathways that are involved in this disease using KEGG Pathway (e.g. insulin signaling pathway in muscle cells). Find specific genes within these pathways that could be potential drug targets. Find drugs that target these genes using JTC (Therapeutic Category in Japan) (e.g. Insulin Receptor INSR).","title":"Task:"},{"location":"kegg/#background","text":"You have a specific human disease of interest and want to better understand specific pathways involved in the progression of this disease and identify existing drugs that target integral proteins within these pathways.","title":"Background:"},{"location":"kegg/#goal","text":"Find drugs that target proteins in the disease pathway.","title":"Goal:"},{"location":"kegg/#method","text":"Pathways: Use the KEGG Pathways API to get pathways involved in the disease of interest (e.g. protein names and cellular localization). Get a list of genes that are potential drug targets. Drugs: Use Therapeutic Category in Japan through KEGG API to get a list of drugs that target proteins coded by genes in the list created previously. Expected outcome: A list of drugs which may play a role in treating this disease. They are drugs that interact with prominent proteins within these pathways.","title":"Method:"},{"location":"kegg/#slides","text":"https://docs.google.com/presentation/d/1pKdhI_D2l1XTjee3szsl8UYE0p77ZMyR/edit#sl ide=id.g203e895e617_0_15","title":"Slides:"},{"location":"mgnify/","text":"MGnify Explored by: Mira Abrecht Description. MGnify is a database aggregating information from microbial metagenomic studies of environmental and biological samples. It contains study metadata, metagenomes, metatranscriptomes, and metabarcodes, as well as the individual genomes and contigs of identified species. The MGnify homepage can be accessed via this link . MGnify has both general documentation of API functions, as well as further documentation about the API\u2019s resource types and schema. MGnify also has an API browser that allows users to physically click through API parameters and generate queries via an internet browser. Tutorial. MGnify_API_tutorial Use cases. Retrieve a list of taxa found in a particular biome Retrieve a genome of a particular taxa Task 2. Integrating Multiple Omics Databases Task. Determine which bacterial species found in the human gut microbiome are resistant to antibiotics. Background. The human gut contains a diverse community of commensal bacteria that helps maintain both intestinal and general health. Antibiotics taken to resolve pathogenic bacterial infections may unintentionally disrupt this system by killing beneficial bacteria. Given this, you want to know which species in the human gut are resistant, rather than susceptible, to antibiotics. This can be done by checking which species found in the human gut microbiome (MGnify) contain specialty genes coding for antibiotic resistance (BV-BRC). Goal. Identify bacterial species found in the human gut microbiome that contain genes coding for antibiotic resistance. Method. Species list. Use MGnify API to return a list of bacterial species identified from the metagenome of the human gut. Resistant bacteria. Query BV-BRC API for bacteria from the MGnify list that contain specialty genes with the property \u201cAntibiotic Resistance.\u201d Expected outcome: A list of bacteria found in the human gut microbiome that contain specialty genes with the property \u201cAntibiotic Resistance.\u201d","title":"Mgnify API"},{"location":"mgnify/#mgnify","text":"Explored by: Mira Abrecht","title":"MGnify"},{"location":"mgnify/#description","text":"MGnify is a database aggregating information from microbial metagenomic studies of environmental and biological samples. It contains study metadata, metagenomes, metatranscriptomes, and metabarcodes, as well as the individual genomes and contigs of identified species. The MGnify homepage can be accessed via this link . MGnify has both general documentation of API functions, as well as further documentation about the API\u2019s resource types and schema. MGnify also has an API browser that allows users to physically click through API parameters and generate queries via an internet browser.","title":"Description."},{"location":"mgnify/#tutorial","text":"MGnify_API_tutorial Use cases. Retrieve a list of taxa found in a particular biome Retrieve a genome of a particular taxa Task 2. Integrating Multiple Omics Databases Task. Determine which bacterial species found in the human gut microbiome are resistant to antibiotics.","title":"Tutorial."},{"location":"mgnify/#background","text":"The human gut contains a diverse community of commensal bacteria that helps maintain both intestinal and general health. Antibiotics taken to resolve pathogenic bacterial infections may unintentionally disrupt this system by killing beneficial bacteria. Given this, you want to know which species in the human gut are resistant, rather than susceptible, to antibiotics. This can be done by checking which species found in the human gut microbiome (MGnify) contain specialty genes coding for antibiotic resistance (BV-BRC).","title":"Background."},{"location":"mgnify/#goal","text":"Identify bacterial species found in the human gut microbiome that contain genes coding for antibiotic resistance.","title":"Goal."},{"location":"mgnify/#method","text":"Species list. Use MGnify API to return a list of bacterial species identified from the metagenome of the human gut. Resistant bacteria. Query BV-BRC API for bacteria from the MGnify list that contain specialty genes with the property \u201cAntibiotic Resistance.\u201d","title":"Method."},{"location":"mgnify/#expected-outcome","text":"A list of bacteria found in the human gut microbiome that contain specialty genes with the property \u201cAntibiotic Resistance.\u201d","title":"Expected outcome:"},{"location":"scop/","text":"Task-1 : SCOP API Explored by: Explored by: Joseph Galasso, Yuxing Zhou and Zitian Wang Description: SCOP , Structure Classification of Protein, aims to provide comprehensive information on protein structure and the evolutionary relationship between proteins with known structures. Using SCOP, users can easily get the structural information for the protein they are interested in and also get the related protein based on structural similarity. SCOP includes 72544 non-redundant domains representing 861631 protein structures. The users can search their protein of interest based on SCOP ID, PDB ID, or UniProt ID. A brief API instruction from SCOP can be accessed here . Use cases: Retrieve the structural information of proteins of interest. By entering the SCOP ID, PDB ID, or UniProt ID of a certain protein of interest, users can get a list of comprehensive protein structure information. Explore proteins with similar structures. SCOP allows users to search for genes with a similar structure to the gene they are interested in. For example, there is a protein of interest for a user. The user can search the structure information of that protein by using the SCOP ID, PDB ID, or UniProt ID. Then, SCOP allows users to search the structure they are interested in, and get a list of proteins with similar structure. Tutorial: Tutorial for SCOP in Google Colab is available here . Task 2: Integration of RCSB Protein Data Bank (PDB) Search API and Structural Classification of Proteins (SCOP) API Explored by: Joseph Galasso, Yuxing Zhou and Zitian Wang Description: (1) Task: Given a list of proteins from PDB, determine the structural classification and type of these proteins. (2) Background: A list of protein sequences has been generated via wet lab assays that are all probable binding partners to a particular molecule. It would be interesting to determine if these protein binding partners share particular structural features or are related in structure or evolution. This would have utility in helping us understand what an optimal binding partner for the molecule of interest would look like. (3) Goal: Given a list of proteins denoted by PDB IDs, use these PDB IDs in a search through SCOP (FA-PDBID field in SCOP) to determine the structural classification of these proteins. Method: We are given the sequences of the proteins (obtained from wet lab assays) that are probable binding partners. Use the RCSB PDB Search API (https://search.rcsb.org/#search-api) to perform a sequence similarity search and obtain the output (use \u201centry\u201d for return type) PDB ID list. Map the PDB IDs from the previous step to the FA-PDBID field in SCOP (https://scop.mrc-lmb.cam.ac.uk/) to identify structural classification of these PDB IDs. Specifically, we will use the SCOP FA-PDBREG field, which describes the family domain region in PDB residue numbering. Expected Outcome: A dataframe with each row having a column listing the protein sequence, a column listing mapped PDB ID(s) (output of RCSB API), and a column containing the family domain regions for respective PDB ID(s) in the prior column (output of SCOP API)","title":"SCOP API"},{"location":"scop/#task-1-scop-api","text":"","title":"Task-1 : SCOP API"},{"location":"scop/#explored-by","text":"Explored by: Joseph Galasso, Yuxing Zhou and Zitian Wang","title":"Explored by:"},{"location":"scop/#description","text":"SCOP , Structure Classification of Protein, aims to provide comprehensive information on protein structure and the evolutionary relationship between proteins with known structures. Using SCOP, users can easily get the structural information for the protein they are interested in and also get the related protein based on structural similarity. SCOP includes 72544 non-redundant domains representing 861631 protein structures. The users can search their protein of interest based on SCOP ID, PDB ID, or UniProt ID. A brief API instruction from SCOP can be accessed here .","title":"Description:"},{"location":"scop/#use-cases","text":"Retrieve the structural information of proteins of interest. By entering the SCOP ID, PDB ID, or UniProt ID of a certain protein of interest, users can get a list of comprehensive protein structure information. Explore proteins with similar structures. SCOP allows users to search for genes with a similar structure to the gene they are interested in. For example, there is a protein of interest for a user. The user can search the structure information of that protein by using the SCOP ID, PDB ID, or UniProt ID. Then, SCOP allows users to search the structure they are interested in, and get a list of proteins with similar structure.","title":"Use cases:"},{"location":"scop/#tutorial","text":"Tutorial for SCOP in Google Colab is available here .","title":"Tutorial:"},{"location":"scop/#task-2-integration-of-rcsb-protein-data-bank-pdb-search-api-and-structural-classification-of-proteins-scop-api","text":"Explored by: Joseph Galasso, Yuxing Zhou and Zitian Wang","title":"Task 2: Integration of RCSB Protein Data Bank (PDB) Search API and Structural Classification of Proteins (SCOP) API"},{"location":"scop/#description_1","text":"(1) Task: Given a list of proteins from PDB, determine the structural classification and type of these proteins. (2) Background: A list of protein sequences has been generated via wet lab assays that are all probable binding partners to a particular molecule. It would be interesting to determine if these protein binding partners share particular structural features or are related in structure or evolution. This would have utility in helping us understand what an optimal binding partner for the molecule of interest would look like. (3) Goal: Given a list of proteins denoted by PDB IDs, use these PDB IDs in a search through SCOP (FA-PDBID field in SCOP) to determine the structural classification of these proteins.","title":"Description:"},{"location":"scop/#method","text":"We are given the sequences of the proteins (obtained from wet lab assays) that are probable binding partners. Use the RCSB PDB Search API (https://search.rcsb.org/#search-api) to perform a sequence similarity search and obtain the output (use \u201centry\u201d for return type) PDB ID list. Map the PDB IDs from the previous step to the FA-PDBID field in SCOP (https://scop.mrc-lmb.cam.ac.uk/) to identify structural classification of these PDB IDs. Specifically, we will use the SCOP FA-PDBREG field, which describes the family domain region in PDB residue numbering.","title":"Method:"},{"location":"scop/#expected-outcome","text":"A dataframe with each row having a column listing the protein sequence, a column listing mapped PDB ID(s) (output of RCSB API), and a column containing the family domain regions for respective PDB ID(s) in the prior column (output of SCOP API)","title":"Expected Outcome:"}]}